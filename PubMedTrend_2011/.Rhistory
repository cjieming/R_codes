# out <- matrix(data=0,nrow=nrow(data),ncol=2)
#
# for (i in 1:nrow(data))
# {
# 	out[i,1] <- fisher.test(matrix(data[i,],nrow=2),alternative="greater")$p.value
# 	out[i,2] <- fisher.test(matrix(data[i,],nrow=2))$p.value
# }
#
# write(t(out), file="fisherpval.txt", ncolumns=2, sep="\t")
###################################################################
###### for 2x2 contingency table (no loop)
## read in data as MATRIX; data is read in column-wise
rm(list = ls())
data <- matrix(c(24703,39051 ,142625,155804), 2,2,
dimnames = list(Pathways = c("p","non-p"),SNPs = c("Synon","Nonsynony")))
data
## fisher's test
## default is 2-sided, 95% CI
x = fisher.test(data,alternative="two.sided")
x
# fisher.test(data)$p.value
# fisher.test(data)$estimate
chisq.test(data)
######################################################################
# ###### for m x n contingency table
# ## note that the permutations are done in Monte Carlo fashion
# data <- matrix(c(862,725,546,883,747,1218, 813,636,440,759,632,1194), 6,2,
# 		dimnames = list(Pathways = c("Metabolic","Cellular Processes","Genetic Info","Signaling","Diseases","Systems"),
# 					SNPs = c("Synon","Nonsynon")))
#
# data
# fisher.test(data)
# fisher.test(data, simulate.p.value=TRUE, B=1e5)
# chisq.test(data)
# setwd("E:/Yale/lab rotations/4 - gerstein lab")
#
# ###### for 2x2 contingency table
# ## read in data as MATRIX; data is read in column-wise
# setwd("C:/Users/Jieming/Desktop")
# rm(list = ls())
# filename <- "jm.txt";
# data <- read.table(filename, header=F, sep = "\t", stringsAsFactors = F)
# data <- data.matrix(data)
# out <- matrix(data=0,nrow=nrow(data),ncol=2)
#
# for (i in 1:nrow(data))
# {
# 	out[i,1] <- fisher.test(matrix(data[i,],nrow=2),alternative="greater")$p.value
# 	out[i,2] <- fisher.test(matrix(data[i,],nrow=2))$p.value
# }
#
# write(t(out), file="fisherpval.txt", ncolumns=2, sep="\t")
###################################################################
###### for 2x2 contingency table (no loop)
## read in data as MATRIX; data is read in column-wise
rm(list = ls())
data <- matrix(c(25606,39142 ,141722,155713), 2,2,
dimnames = list(Pathways = c("p","non-p"),SNPs = c("Synon","Nonsynony")))
data
## fisher's test
## default is 2-sided, 95% CI
x = fisher.test(data,alternative="two.sided")
x
# fisher.test(data)$p.value
# fisher.test(data)$estimate
chisq.test(data)
######################################################################
# ###### for m x n contingency table
# ## note that the permutations are done in Monte Carlo fashion
# data <- matrix(c(862,725,546,883,747,1218, 813,636,440,759,632,1194), 6,2,
# 		dimnames = list(Pathways = c("Metabolic","Cellular Processes","Genetic Info","Signaling","Diseases","Systems"),
# 					SNPs = c("Synon","Nonsynon")))
#
# data
# fisher.test(data)
# fisher.test(data, simulate.p.value=TRUE, B=1e5)
# chisq.test(data)
# setwd("E:/Yale/lab rotations/4 - gerstein lab")
#
# ###### for 2x2 contingency table
# ## read in data as MATRIX; data is read in column-wise
# setwd("C:/Users/Jieming/Desktop")
# rm(list = ls())
# filename <- "jm.txt";
# data <- read.table(filename, header=F, sep = "\t", stringsAsFactors = F)
# data <- data.matrix(data)
# out <- matrix(data=0,nrow=nrow(data),ncol=2)
#
# for (i in 1:nrow(data))
# {
# 	out[i,1] <- fisher.test(matrix(data[i,],nrow=2),alternative="greater")$p.value
# 	out[i,2] <- fisher.test(matrix(data[i,],nrow=2))$p.value
# }
#
# write(t(out), file="fisherpval.txt", ncolumns=2, sep="\t")
###################################################################
###### for 2x2 contingency table (no loop)
## read in data as MATRIX; data is read in column-wise
rm(list = ls())
data <- matrix(c(41810,61291 ,125518,133564), 2,2,
dimnames = list(Pathways = c("p","non-p"),SNPs = c("Synon","Nonsynony")))
data
## fisher's test
## default is 2-sided, 95% CI
x = fisher.test(data,alternative="two.sided")
x
# fisher.test(data)$p.value
# fisher.test(data)$estimate
chisq.test(data)
######################################################################
# ###### for m x n contingency table
# ## note that the permutations are done in Monte Carlo fashion
# data <- matrix(c(862,725,546,883,747,1218, 813,636,440,759,632,1194), 6,2,
# 		dimnames = list(Pathways = c("Metabolic","Cellular Processes","Genetic Info","Signaling","Diseases","Systems"),
# 					SNPs = c("Synon","Nonsynon")))
#
# data
# fisher.test(data)
# fisher.test(data, simulate.p.value=TRUE, B=1e5)
# chisq.test(data)
# setwd("E:/Yale/lab rotations/4 - gerstein lab")
#
# ###### for 2x2 contingency table
# ## read in data as MATRIX; data is read in column-wise
# setwd("C:/Users/Jieming/Desktop")
# rm(list = ls())
# filename <- "jm.txt";
# data <- read.table(filename, header=F, sep = "\t", stringsAsFactors = F)
# data <- data.matrix(data)
# out <- matrix(data=0,nrow=nrow(data),ncol=2)
#
# for (i in 1:nrow(data))
# {
# 	out[i,1] <- fisher.test(matrix(data[i,],nrow=2),alternative="greater")$p.value
# 	out[i,2] <- fisher.test(matrix(data[i,],nrow=2))$p.value
# }
#
# write(t(out), file="fisherpval.txt", ncolumns=2, sep="\t")
###################################################################
###### for 2x2 contingency table (no loop)
## read in data as MATRIX; data is read in column-wise
rm(list = ls())
data <- matrix(c(41747,66799 ,125581,128056), 2,2,
dimnames = list(Pathways = c("p","non-p"),SNPs = c("Synon","Nonsynony")))
data
## fisher's test
## default is 2-sided, 95% CI
x = fisher.test(data,alternative="two.sided")
x
# fisher.test(data)$p.value
# fisher.test(data)$estimate
chisq.test(data)
######################################################################
# ###### for m x n contingency table
# ## note that the permutations are done in Monte Carlo fashion
# data <- matrix(c(862,725,546,883,747,1218, 813,636,440,759,632,1194), 6,2,
# 		dimnames = list(Pathways = c("Metabolic","Cellular Processes","Genetic Info","Signaling","Diseases","Systems"),
# 					SNPs = c("Synon","Nonsynon")))
#
# data
# fisher.test(data)
# fisher.test(data, simulate.p.value=TRUE, B=1e5)
# chisq.test(data)
# setwd("E:/Yale/lab rotations/4 - gerstein lab")
#
# ###### for 2x2 contingency table
# ## read in data as MATRIX; data is read in column-wise
# setwd("C:/Users/Jieming/Desktop")
# rm(list = ls())
# filename <- "jm.txt";
# data <- read.table(filename, header=F, sep = "\t", stringsAsFactors = F)
# data <- data.matrix(data)
# out <- matrix(data=0,nrow=nrow(data),ncol=2)
#
# for (i in 1:nrow(data))
# {
# 	out[i,1] <- fisher.test(matrix(data[i,],nrow=2),alternative="greater")$p.value
# 	out[i,2] <- fisher.test(matrix(data[i,],nrow=2))$p.value
# }
#
# write(t(out), file="fisherpval.txt", ncolumns=2, sep="\t")
###################################################################
###### for 2x2 contingency table (no loop)
## read in data as MATRIX; data is read in column-wise
rm(list = ls())
data <- matrix(c(31612,51479 ,135716,143376), 2,2,
dimnames = list(Pathways = c("p","non-p"),SNPs = c("Synon","Nonsynony")))
data
## fisher's test
## default is 2-sided, 95% CI
x = fisher.test(data,alternative="two.sided")
x
# fisher.test(data)$p.value
# fisher.test(data)$estimate
chisq.test(data)
######################################################################
# ###### for m x n contingency table
# ## note that the permutations are done in Monte Carlo fashion
# data <- matrix(c(862,725,546,883,747,1218, 813,636,440,759,632,1194), 6,2,
# 		dimnames = list(Pathways = c("Metabolic","Cellular Processes","Genetic Info","Signaling","Diseases","Systems"),
# 					SNPs = c("Synon","Nonsynon")))
#
# data
# fisher.test(data)
# fisher.test(data, simulate.p.value=TRUE, B=1e5)
# chisq.test(data)
# setwd("E:/Yale/lab rotations/4 - gerstein lab")
#
# ###### for 2x2 contingency table
# ## read in data as MATRIX; data is read in column-wise
# setwd("C:/Users/Jieming/Desktop")
# rm(list = ls())
# filename <- "jm.txt";
# data <- read.table(filename, header=F, sep = "\t", stringsAsFactors = F)
# data <- data.matrix(data)
# out <- matrix(data=0,nrow=nrow(data),ncol=2)
#
# for (i in 1:nrow(data))
# {
# 	out[i,1] <- fisher.test(matrix(data[i,],nrow=2),alternative="greater")$p.value
# 	out[i,2] <- fisher.test(matrix(data[i,],nrow=2))$p.value
# }
#
# write(t(out), file="fisherpval.txt", ncolumns=2, sep="\t")
###################################################################
###### for 2x2 contingency table (no loop)
## read in data as MATRIX; data is read in column-wise
rm(list = ls())
data <- matrix(c(18128,27349 ,149200,167506), 2,2,
dimnames = list(Pathways = c("p","non-p"),SNPs = c("Synon","Nonsynony")))
data
## fisher's test
## default is 2-sided, 95% CI
x = fisher.test(data,alternative="two.sided")
x
# fisher.test(data)$p.value
# fisher.test(data)$estimate
chisq.test(data)
######################################################################
# ###### for m x n contingency table
# ## note that the permutations are done in Monte Carlo fashion
# data <- matrix(c(862,725,546,883,747,1218, 813,636,440,759,632,1194), 6,2,
# 		dimnames = list(Pathways = c("Metabolic","Cellular Processes","Genetic Info","Signaling","Diseases","Systems"),
# 					SNPs = c("Synon","Nonsynon")))
#
# data
# fisher.test(data)
# fisher.test(data, simulate.p.value=TRUE, B=1e5)
# chisq.test(data)
# setwd("E:/Yale/lab rotations/4 - gerstein lab")
#
# ###### for 2x2 contingency table
# ## read in data as MATRIX; data is read in column-wise
# setwd("C:/Users/Jieming/Desktop")
# rm(list = ls())
# filename <- "jm.txt";
# data <- read.table(filename, header=F, sep = "\t", stringsAsFactors = F)
# data <- data.matrix(data)
# out <- matrix(data=0,nrow=nrow(data),ncol=2)
#
# for (i in 1:nrow(data))
# {
# 	out[i,1] <- fisher.test(matrix(data[i,],nrow=2),alternative="greater")$p.value
# 	out[i,2] <- fisher.test(matrix(data[i,],nrow=2))$p.value
# }
#
# write(t(out), file="fisherpval.txt", ncolumns=2, sep="\t")
###################################################################
###### for 2x2 contingency table (no loop)
## read in data as MATRIX; data is read in column-wise
rm(list = ls())
data <- matrix(c(49946,77421 ,117382,117434), 2,2,
dimnames = list(Pathways = c("p","non-p"),SNPs = c("Synon","Nonsynony")))
data
## fisher's test
## default is 2-sided, 95% CI
x = fisher.test(data,alternative="two.sided")
x
# fisher.test(data)$p.value
# fisher.test(data)$estimate
chisq.test(data)
######################################################################
# ###### for m x n contingency table
# ## note that the permutations are done in Monte Carlo fashion
# data <- matrix(c(862,725,546,883,747,1218, 813,636,440,759,632,1194), 6,2,
# 		dimnames = list(Pathways = c("Metabolic","Cellular Processes","Genetic Info","Signaling","Diseases","Systems"),
# 					SNPs = c("Synon","Nonsynon")))
#
# data
# fisher.test(data)
# fisher.test(data, simulate.p.value=TRUE, B=1e5)
# chisq.test(data)
# setwd("E:/Yale/lab rotations/4 - gerstein lab")
#
# ###### for 2x2 contingency table
# ## read in data as MATRIX; data is read in column-wise
# setwd("C:/Users/Jieming/Desktop")
# rm(list = ls())
# filename <- "jm.txt";
# data <- read.table(filename, header=F, sep = "\t", stringsAsFactors = F)
# data <- data.matrix(data)
# out <- matrix(data=0,nrow=nrow(data),ncol=2)
#
# for (i in 1:nrow(data))
# {
# 	out[i,1] <- fisher.test(matrix(data[i,],nrow=2),alternative="greater")$p.value
# 	out[i,2] <- fisher.test(matrix(data[i,],nrow=2))$p.value
# }
#
# write(t(out), file="fisherpval.txt", ncolumns=2, sep="\t")
###################################################################
###### for 2x2 contingency table (no loop)
## read in data as MATRIX; data is read in column-wise
rm(list = ls())
data <- matrix(c(98298,136431 ,69030,58424), 2,2,
dimnames = list(Pathways = c("p","non-p"),SNPs = c("Synon","Nonsynony")))
data
## fisher's test
## default is 2-sided, 95% CI
x = fisher.test(data,alternative="two.sided")
x
# fisher.test(data)$p.value
# fisher.test(data)$estimate
chisq.test(data)
######################################################################
# ###### for m x n contingency table
# ## note that the permutations are done in Monte Carlo fashion
# data <- matrix(c(862,725,546,883,747,1218, 813,636,440,759,632,1194), 6,2,
# 		dimnames = list(Pathways = c("Metabolic","Cellular Processes","Genetic Info","Signaling","Diseases","Systems"),
# 					SNPs = c("Synon","Nonsynon")))
#
# data
# fisher.test(data)
# fisher.test(data, simulate.p.value=TRUE, B=1e5)
# chisq.test(data)
# setwd("E:/Yale/lab rotations/4 - gerstein lab")
#
# ###### for 2x2 contingency table
# ## read in data as MATRIX; data is read in column-wise
# setwd("C:/Users/Jieming/Desktop")
# rm(list = ls())
# filename <- "jm.txt";
# data <- read.table(filename, header=F, sep = "\t", stringsAsFactors = F)
# data <- data.matrix(data)
# out <- matrix(data=0,nrow=nrow(data),ncol=2)
#
# for (i in 1:nrow(data))
# {
# 	out[i,1] <- fisher.test(matrix(data[i,],nrow=2),alternative="greater")$p.value
# 	out[i,2] <- fisher.test(matrix(data[i,],nrow=2))$p.value
# }
#
# write(t(out), file="fisherpval.txt", ncolumns=2, sep="\t")
###################################################################
###### for 2x2 contingency table (no loop)
## read in data as MATRIX; data is read in column-wise
rm(list = ls())
data <- matrix(c(98298,136431 ,69030,58424), 2,2,
dimnames = list(Pathways = c("p","non-p"),SNPs = c("Synon","Nonsynony")))
data
## fisher's test
## default is 2-sided, 95% CI
x = fisher.test(data,alternative="two.sided")
x
# fisher.test(data)$p.value
# fisher.test(data)$estimate
chisq.test(data)
######################################################################
# ###### for m x n contingency table
# ## note that the permutations are done in Monte Carlo fashion
# data <- matrix(c(862,725,546,883,747,1218, 813,636,440,759,632,1194), 6,2,
# 		dimnames = list(Pathways = c("Metabolic","Cellular Processes","Genetic Info","Signaling","Diseases","Systems"),
# 					SNPs = c("Synon","Nonsynon")))
#
# data
# fisher.test(data)
# fisher.test(data, simulate.p.value=TRUE, B=1e5)
# chisq.test(data)
?fisher.test
a=c(AAAAAAAGVIYLRMDQPNTALEHYTSALGAHPGD
AAAAANLGSALLAAGRPAEAVPVLERAVEFAPTL
AAAAASLGDACRQLGRHAEAIAHYERALTLQPNA
AAAAFKSGNTMFAAGDLNGAEVAWRKALSLTRNP
AAAAGSLGDACRMLGRHAEAIAHYQRALAIQPNA
AAAAHFLGLLLHQTGRSEEGLDLIERSVSLQPTN
AAAARLRGNDLFKAAKFVEACAAYGEGLDREPSN
AAAAYQEGLTLEKGNKLRDAATAFGRALDLAAEN
AAACFNLGYVLQQNGRHDEARPAFEKATEHQPCM
AAACGALGLAHRLLRRWDKALGHHTQELTLRQEL)
a=c('AAAAAAAGVIYLRMDQPNTALEHYTSALGAHPGD'
'AAAAANLGSALLAAGRPAEAVPVLERAVEFAPTL'
'AAAAASLGDACRQLGRHAEAIAHYERALTLQPNA'
'AAAAFKSGNTMFAAGDLNGAEVAWRKALSLTRNP'
'AAAAGSLGDACRMLGRHAEAIAHYQRALAIQPNA'
'AAAAHFLGLLLHQTGRSEEGLDLIERSVSLQPTN'
'AAAARLRGNDLFKAAKFVEACAAYGEGLDREPSN'
'AAAAYQEGLTLEKGNKLRDAATAFGRALDLAAEN'
'AAACFNLGYVLQQNGRHDEARPAFEKATEHQPCM'
'AAACGALGLAHRLLRRWDKALGHHTQELTLRQEL')
a="AAAAAAAGVIYLRMDQPNTALEHYTSALGAHPGD"
?counts
?count
table(a)
?substring
?strsplit
a=strsplit('AAAAAAAGVIYLRMDQPNTALEHYTSALGAHPGD','')
a
table(a)
setwd("C:/Shared/scripts-R_perl_shell_macros/R codes/PubMedTrend");
# the scripts are downloaded from
# http://rpsychologist.com/an-r-script-to-automatically-look-at-pubmed-citation-counts-by-year-of-publication/
# script source
source("PubMedTrend.R");
# query sample
# query <- c("cbt"= "cognitive behav* psychotherap*[tiab] OR cognitive behav* therap*[tiab]",
#            "pdt" = "psychodynamic therap*[tiab] OR psychodynamic psychotherap*[tiab]",
#            "psychoanalytic" = "psychoanalytic therap*[tiab] OR psychoanalytic psychoterap*[tiab]",
#            "ssri" = "selective serotonin reuptake inhibitor*[tiab]",
#            "mindfulness" = "mindfulness[tiab]")
# query <- c("tpr" = "tpr [tw]","ank" = "ankyrin [tw]","armadillo" = "armadillo[tw]");
## note that you need to change the years manually in the function script [PPDAT] vs [DP]
# query <- c("tpr" = "tpr [tw] OR tetratricopeptide [tw]","ank" = "ank [tw] OR ankyrin [tw]",
#            "armadillo" = "armadillo [tw]", "lrr"="lrr [tw] OR leucine rich repeat [tw]",
#            "sh3" = "sh3 [tw]");
# query <- c("KEGG" = "KEGG [tw]","NetPath" = "NetPath [tw]","Reactome" = "Reactome [tw]","SignaLink" = "SignaLink [tw]");
query <- c("YY Teo" = "yik ying teo");
df <- PubMedTrend(query);
# show number of hits
pubhits <- PubTotalHits();
# plot
x11()
library(ggplot2)
library(directlabels)
ggplot(df, aes(year, relative, group=.id, fill=.id)) +
geom_area() +
opts(title=paste("Area Plot of PubMed Publications per Year\nfor", paste(names(query), collapse = ", "))) +
xlab("year") +
ylab("Publications per 1 million PubMed articles") +
scale_fill_brewer()
### LINE PLOTS ###
x11()
# RAW
ggplot(df, aes(year, relative, group=.id, color=.id)) +
geom_line(show_guide=F) +
xlab("Publication year") +
ylab("Publications per 1 million PubMed articles") +
opts(title = paste("Pubmed hits for", paste(names(query), collapse = ", ")))
x11()
# SMOOTHED
p <- ggplot(df, aes(year, relative, group=.id, color=.id)) +
geom_line(alpha = I(7/10), color="grey", show_guide=F) +
stat_smooth(size=2, span=0.3, se=F, show_guide=F) +
xlab("Publication year") +
ylab("Publications per 1 million PubMed articles") +
opts(title = paste("Pubmed hits (smoothed) for", paste(names(query), collapse = ", "))) +
xlim(1950,2020)
direct.label(p, "last.bumpup")
year
df <- PubMedTrend(query, yrMax = '2020');
df <- PubMedTrend(query, yrMax = 2020);
df <- PubMedTrend(query, yrStart = 1950, yrMax = 2020);
df <- PubMedTrend(query, yrStart = 1950, yrMax = 2012);
ggplot(df, aes(year, relative, group=.id, fill=.id)) +
setwd("C:/Shared/scripts-R_perl_shell_macros/R codes/PubMedTrend");
# the scripts are downloaded from
# http://rpsychologist.com/an-r-script-to-automatically-look-at-pubmed-citation-counts-by-year-of-publication/
# script source
source("PubMedTrend.R");
# query sample
# query <- c("cbt"= "cognitive behav* psychotherap*[tiab] OR cognitive behav* therap*[tiab]",
#            "pdt" = "psychodynamic therap*[tiab] OR psychodynamic psychotherap*[tiab]",
#            "psychoanalytic" = "psychoanalytic therap*[tiab] OR psychoanalytic psychoterap*[tiab]",
#            "ssri" = "selective serotonin reuptake inhibitor*[tiab]",
#            "mindfulness" = "mindfulness[tiab]")
# query <- c("tpr" = "tpr [tw]","ank" = "ankyrin [tw]","armadillo" = "armadillo[tw]");
## note that you need to change the years manually in the function script [PPDAT] vs [DP]
# query <- c("tpr" = "tpr [tw] OR tetratricopeptide [tw]","ank" = "ank [tw] OR ankyrin [tw]",
#            "armadillo" = "armadillo [tw]", "lrr"="lrr [tw] OR leucine rich repeat [tw]",
#            "sh3" = "sh3 [tw]");
# query <- c("KEGG" = "KEGG [tw]","NetPath" = "NetPath [tw]","Reactome" = "Reactome [tw]","SignaLink" = "SignaLink [tw]");
query <- c("YY Teo" = "yik ying teo");
df <- PubMedTrend(query, yrMax = 2020);
# show number of hits
pubhits <- PubTotalHits();
# plot
x11()
library(ggplot2)
library(directlabels)
ggplot(df, aes(year, relative, group=.id, fill=.id)) +
geom_area() +
opts(title=paste("Area Plot of PubMed Publications per Year\nfor", paste(names(query), collapse = ", "))) +
xlab("year") +
ylab("Publications per 1 million PubMed articles") +
scale_fill_brewer()
### LINE PLOTS ###
x11()
# RAW
ggplot(df, aes(year, relative, group=.id, color=.id)) +
geom_line(show_guide=F) +
xlab("Publication year") +
ylab("Publications per 1 million PubMed articles") +
opts(title = paste("Pubmed hits for", paste(names(query), collapse = ", ")))
x11()
# SMOOTHED
p <- ggplot(df, aes(year, relative, group=.id, color=.id)) +
geom_line(alpha = I(7/10), color="grey", show_guide=F) +
stat_smooth(size=2, span=0.3, se=F, show_guide=F) +
xlab("Publication year") +
ylab("Publications per 1 million PubMed articles") +
opts(title = paste("Pubmed hits (smoothed) for", paste(names(query), collapse = ", "))) +
xlim(1950,2020)
direct.label(p, "last.bumpup")
