0.648074
0.732674
0.078353
0.986856
0.759628
0.154023
0.540066
0.350806
0.987925
0.983871
1
0.79011
0.625001
0.370371
0.350806
0.540066
0.223107
)
a=c(1,2)
a=c(-0.842857,-0.964835,0.743702,-0.255763,-0.285524,0.921053,0.935484,1,0.732674,0.504032,0.625001,0.185484,0.227974,1,0.987904,0.969231,0.664368,0.75549,0.237938,0.475806,0.002656,-0.006897,-0.540066,-0.223107,0.665322,0.6875,0.991935,0.986856,0.759628,-0.161289,0.148515,0.076613,0.677419,0.397078,0.898026,-0.040322,0.265604,0.991935,0.204598,-0.149779,-0.081009,0.980285,0.813324,0.14023,0.991218,0.967742,0.98573,1,1,0.777452,0.493962,0.440529,0.991935,0.986856,0.759628,0.625001,-0.79011,0.79011,0.625001,1,0.141129,0.991936,0.978022,0.577012,0.034482,-0.064516,0.732674,0.682602,0.066401,0.539054,0.177955,0.254108,0.354839,-0.964835,-0.265604,0.986856,0.991935,0.931452,0.898026,0.265604,-0.391128,-0.081497,0.887097,0.800657,0.262069,-0.154023,-0.192731,-0.133064,0.025232,0.98387,0.980285,0.759628,0.947368,0.517241,0.016129,-0.184008,0.732674,0.682602,-0.241935,-0.243392,0.682602,0.853231,0.75,0.197875,0.836802,-0.391128,0.493962,0.15405,0.665322,0.80088,0.575032,0,-0.296148,0.018391,0.836802,0.677419,0.397078,0.666667,0.625001,0.79011,0.648074,0.375,0.539054,0.721815,0.326613,0.440529,0.986856,0.540066,0.397078,0.759628,-0.743702,-0.171314,0.850806,1,0.732674,0.682602,-0.05977,0.842857,0.296148,0.967742,0.98573,1,0.625001,0.79011,0.648074,0.328736,1,0.35591,0.677159,-0.357456,0.004033,0.032184,0.362903,0.490088,0.991935,0.989047,0.814056,0.964835,1,0.79011,0.625001,0.625001,0.79011,0.648074,0.328736,1,0.056955,0.24138,0.004393,0.493962,0.314516,0.576867,0.15405,-0.013793,0.59375,-0.370371,0.148515,1,1,0.649193,0.362239,0.633065,0.010624,0.15625,0.366935,0.729136,0.540066,0.350806,0.223107,0.729136,0.490088,0.487384,0.350806,0.732674,0.677419,0.836802,-0.201613,0.79011,0.682602,-0.967742,-0.98573,-0.322015,0.314516,0.493962,0.15405,0.576867,0.732674,0.991218,0.983871,-0.98573,-0.967742,0.39494,0.544354,0.131474,0.3125,0.964835,0.987904,0.729136,0.803453,1,0.081497,0.391128,0.781609,-0.967742,-0.98573,0.991935,0.986856,0.759628,0.816252,0.422149,0.129032,1,0.576867,0.732674,0.504032,-0.161289,0.568549,0.773626,0.592593,0.913377,0.939516,0.475842,0.482759,-0.493962,-0.15405,0.987925,0.781609,1,0.805271,0.15405,0.964835,0.987904,0.803453,0.39494,0.131474,0.853231,0.75,0.663982,0.197875,0.732674,0.504032,0.682602,0.98573,0.967742,1,-0.539054,-0.375,-0.177955,0.931452,0.898026,1,0.98573,1,0.69197,0.685258,0.440529,0.487384,-0.315038,0.983871,0.991218,1,0.177419,0.375,0.539054,-0.184009,0.504032,0.732674,0.682602,0.842857,0.296148,-0.096774,0.422149,-0.743702,-0.225771,-0.076613,-0.08871,0.682602,0.649193,0.566265,0.79011,0.625001,0.648074,0.732674,0.078353,0.986856,0.759628,0.154023,0.540066,0.350806,0.987925,0.983871,1,0.79011,0.625001,0.370371,0.350806,0.540066,0.223107)
b=c(0.038784486,0.976190476,1,0.152777778,0.152777778,0.888888889,0.888888889,0.888888889,0.940617959,0.940617959,0.935483871,0.871559633,0.871559633,1,0.981470731,0.981470731,0.981470731,0.981470731,0.827027027,0.827027027,0.827027027,0.827027027,0.016129032,0.016129032,1,0.047619048,0.967741935,0.967741935,0.967741935,0.872340426,0.872340426,0.969387755,0.954545455,0.954545455,0.877777778,0.892857143,0.988372093,0.993055556,0.993055556,0.076923077,0.882352941,0.974025974,0.974025974,0.974025974,1,0.9375,0.9375,0.9375,0.9375,0.9375,1,0.847457627,0.99122807,0.99122807,0.99122807,0.965517241,0,0.893333333,0.893333333,0.893333333,0,0.983606557,0.983606557,0.983606557,0.077228327,0.053333333,0.997311828,0.997311828,0.857142857,0.846153846,0.846153846,0.794871795,0.794871795,0.137931034,1,1,1,0.951612903,0.951612903,0.951612903,0.129032258,0.129032258,0.895211443,0.895211443,0.895211443,0,0.15,0.15,0.15,0.878787879,0.878787879,0.878787879,0.878787879,0.878787879,0.966346154,0.966346154,1,1,0.994623656,0.994623656,1,1,1,1,1,1,0.966666667,0.966666667,0.918367347,0.918367347,0.918367347,0.918367347,0.023809524,0.023809524,0.911764706,0.911764706,0.911764706,0.911764706,1,1,1,1,1,0,0.909090909,0.909090909,0.943661972,1,0.857142857,1,0,0,0.189189189,0.189189189,1,1,1,0.952380952,0.952380952,1,1,1,1,1,1,1,1,0.824427481,0.824427481,0.090909091,0.090909091,0.090909091,0.9,0.9,0.954545455,0.954545455,0.954545455,1,1,0.842519685,0.842519685,0.84,0.84,0.84,0.84,0.84,1,1,1,1,1,1,1,1,1,0.052631579,0.5,0.5,0.96969697,0.88,0.966101695,0.966101695,0.966101695,0.966101695,0.925925926,0,0.956521739,0.956521739,0.956521739,0.243902439,0.890625,0.890625,0.875,1,0.888888889,0.888888889,0.91025641,0.91025641,1,0.095238095,0.095238095,0,1,1,1,1,0.980392157,0.966666667,0.966666667,0.134328358,0.134328358,0.925925926,0.925925926,0.925925926,0.925925926,0.737226277,0.737226277,0.737226277,0.737226277,0.737226277,0.890625,0.890625,0.935483871,0.060606061,0.060606061,0.941747573,0.941747573,0.941747573,0.941747573,0.971014493,0.971014493,0.971014493,1,0.9,0.9,0.923076923,0.875,0.875,0.875,0.961538462,0.961538462,0.961538462,0.961538462,0.065669856,0.065669856,1,1,1,1,1,0.918032787,0.918032787,0.918032787,0.982758621,0.982758621,0.887804878,0.887804878,0.887804878,0.887804878,0.933333333,0.933333333,0.933333333,0.992307692,0.992307692,0.992307692,0,0,0,0.975,0.975,0.975,0.952380952,0.944444444,0.954545455,0.954545455,0.974358974,0.974358974,0.058823529,0.974576271,0.974576271,0.974576271,0.1875,0.979166667,0.979166667,0.909090909,0.847457627,0.847457627,0.847457627,0.923076923,0.923076923,0.115384615,0.005586592,0,0.004444444,0.004444444,1,1,0.952380952,0.952380952,0.46875,0.46875,0.46875,0.821428571,0.933333333,1,1,1,0.977777778,0.977777778,0.882352941,0.882352941,0.882352941,1,1,1,0.960526316,0.960526316,0.960526316)
?cor
cor(a,b,method="spearman")
cor(a,b,method="pearson")
?fishers
?fishers.test
?fisher.test
afdata.asb <- matrix(c(36,17,16,246), 2,2, dimnames = list(Pathways = c("AR<0.5","AR>0.5"),SNPs = c("AFdiff<0","AFdiff>0")))
afdata.asb
afdata.asb <- matrix(c(36,17,16,246), 2,2, dimnames = list(Pathways = c("AFdiff<0","AFdiff>0"),SNPs = c("AR<0.5","AR>0.5")))
a <- matrix(c(36,17,16,246), 2,2, dimnames = list(Pathways = c("AFdiff<0","AFdiff>0"),SNPs = c("AR<0.5","AR>0.5")))
a
x = fisher.test(a,alternative="two.sided")
x
cor(a,b,method="spearman")
y=c(0.038784486,0.976190476,1,0.152777778,0.152777778,0.888888889,0.888888889,0.888888889,0.940617959,0.940617959,0.935483871,0.871559633,0.871559633,1,0.981470731,0.981470731,0.981470731,0.981470731,0.827027027,0.827027027,0.827027027,0.827027027,0.016129032,0.016129032,1,0.047619048,0.967741935,0.967741935,0.967741935,0.872340426,0.872340426,0.969387755,0.954545455,0.954545455,0.877777778,0.892857143,0.988372093,0.993055556,0.993055556,0.076923077,0.882352941,0.974025974,0.974025974,0.974025974,1,0.9375,0.9375,0.9375,0.9375,0.9375,1,0.847457627,0.99122807,0.99122807,0.99122807,0.965517241,0,0.893333333,0.893333333,0.893333333,0,0.983606557,0.983606557,0.983606557,0.077228327,0.053333333,0.997311828,0.997311828,0.857142857,0.846153846,0.846153846,0.794871795,0.794871795,0.137931034,1,1,1,0.951612903,0.951612903,0.951612903,0.129032258,0.129032258,0.895211443,0.895211443,0.895211443,0,0.15,0.15,0.15,0.878787879,0.878787879,0.878787879,0.878787879,0.878787879,0.966346154,0.966346154,1,1,0.994623656,0.994623656,1,1,1,1,1,1,0.966666667,0.966666667,0.918367347,0.918367347,0.918367347,0.918367347,0.023809524,0.023809524,0.911764706,0.911764706,0.911764706,0.911764706,1,1,1,1,1,0,0.909090909,0.909090909,0.943661972,1,0.857142857,1,0,0,0.189189189,0.189189189,1,1,1,0.952380952,0.952380952,1,1,1,1,1,1,1,1,0.824427481,0.824427481,0.090909091,0.090909091,0.090909091,0.9,0.9,0.954545455,0.954545455,0.954545455,1,1,0.842519685,0.842519685,0.84,0.84,0.84,0.84,0.84,1,1,1,1,1,1,1,1,1,0.052631579,0.5,0.5,0.96969697,0.88,0.966101695,0.966101695,0.966101695,0.966101695,0.925925926,0,0.956521739,0.956521739,0.956521739,0.243902439,0.890625,0.890625,0.875,1,0.888888889,0.888888889,0.91025641,0.91025641,1,0.095238095,0.095238095,0,1,1,1,1,0.980392157,0.966666667,0.966666667,0.134328358,0.134328358,0.925925926,0.925925926,0.925925926,0.925925926,0.737226277,0.737226277,0.737226277,0.737226277,0.737226277,0.890625,0.890625,0.935483871,0.060606061,0.060606061,0.941747573,0.941747573,0.941747573,0.941747573,0.971014493,0.971014493,0.971014493,1,0.9,0.9,0.923076923,0.875,0.875,0.875,0.961538462,0.961538462,0.961538462,0.961538462,0.065669856,0.065669856,1,1,1,1,1,0.918032787,0.918032787,0.918032787,0.982758621,0.982758621,0.887804878,0.887804878,0.887804878,0.887804878,0.933333333,0.933333333,0.933333333,0.992307692,0.992307692,0.992307692,0,0,0,0.975,0.975,0.975,0.952380952,0.944444444,0.954545455,0.954545455,0.974358974,0.974358974,0.058823529,0.974576271,0.974576271,0.974576271,0.1875,0.979166667,0.979166667,0.909090909,0.847457627,0.847457627,0.847457627,0.923076923,0.923076923,0.115384615,0.005586592,0,0.004444444,0.004444444,1,1,0.952380952,0.952380952,0.46875,0.46875,0.46875,0.821428571,0.933333333,1,1,1,0.977777778,0.977777778,0.882352941,0.882352941,0.882352941,1,1,1,0.960526316,0.960526316,0.960526316)
z=c(-0.842857,-0.964835,0.743702,-0.255763,-0.285524,0.921053,0.935484,1,0.732674,0.504032,0.625001,0.185484,0.227974,1,0.987904,0.969231,0.664368,0.75549,0.237938,0.475806,0.002656,-0.006897,-0.540066,-0.223107,0.665322,0.6875,0.991935,0.986856,0.759628,-0.161289,0.148515,0.076613,0.677419,0.397078,0.898026,-0.040322,0.265604,0.991935,0.204598,-0.149779,-0.081009,0.980285,0.813324,0.14023,0.991218,0.967742,0.98573,1,1,0.777452,0.493962,0.440529,0.991935,0.986856,0.759628,0.625001,-0.79011,0.79011,0.625001,1,0.141129,0.991936,0.978022,0.577012,0.034482,-0.064516,0.732674,0.682602,0.066401,0.539054,0.177955,0.254108,0.354839,-0.964835,-0.265604,0.986856,0.991935,0.931452,0.898026,0.265604,-0.391128,-0.081497,0.887097,0.800657,0.262069,-0.154023,-0.192731,-0.133064,0.025232,0.98387,0.980285,0.759628,0.947368,0.517241,0.016129,-0.184008,0.732674,0.682602,-0.241935,-0.243392,0.682602,0.853231,0.75,0.197875,0.836802,-0.391128,0.493962,0.15405,0.665322,0.80088,0.575032,0,-0.296148,0.018391,0.836802,0.677419,0.397078,0.666667,0.625001,0.79011,0.648074,0.375,0.539054,0.721815,0.326613,0.440529,0.986856,0.540066,0.397078,0.759628,-0.743702,-0.171314,0.850806,1,0.732674,0.682602,-0.05977,0.842857,0.296148,0.967742,0.98573,1,0.625001,0.79011,0.648074,0.328736,1,0.35591,0.677159,-0.357456,0.004033,0.032184,0.362903,0.490088,0.991935,0.989047,0.814056,0.964835,1,0.79011,0.625001,0.625001,0.79011,0.648074,0.328736,1,0.056955,0.24138,0.004393,0.493962,0.314516,0.576867,0.15405,-0.013793,0.59375,-0.370371,0.148515,1,1,0.649193,0.362239,0.633065,0.010624,0.15625,0.366935,0.729136,0.540066,0.350806,0.223107,0.729136,0.490088,0.487384,0.350806,0.732674,0.677419,0.836802,-0.201613,0.79011,0.682602,-0.967742,-0.98573,-0.322015,0.314516,0.493962,0.15405,0.576867,0.732674,0.991218,0.983871,-0.98573,-0.967742,0.39494,0.544354,0.131474,0.3125,0.964835,0.987904,0.729136,0.803453,1,0.081497,0.391128,0.781609,-0.967742,-0.98573,0.991935,0.986856,0.759628,0.816252,0.422149,0.129032,1,0.576867,0.732674,0.504032,-0.161289,0.568549,0.773626,0.592593,0.913377,0.939516,0.475842,0.482759,-0.493962,-0.15405,0.987925,0.781609,1,0.805271,0.15405,0.964835,0.987904,0.803453,0.39494,0.131474,0.853231,0.75,0.663982,0.197875,0.732674,0.504032,0.682602,0.98573,0.967742,1,-0.539054,-0.375,-0.177955,0.931452,0.898026,1,0.98573,1,0.69197,0.685258,0.440529,0.487384,-0.315038,0.983871,0.991218,1,0.177419,0.375,0.539054,-0.184009,0.504032,0.732674,0.682602,0.842857,0.296148,-0.096774,0.422149,-0.743702,-0.225771,-0.076613,-0.08871,0.682602,0.649193,0.566265,0.79011,0.625001,0.648074,0.732674,0.078353,0.986856,0.759628,0.154023,0.540066,0.350806,0.987925,0.983871,1,0.79011,0.625001,0.370371,0.350806,0.540066,0.223107)
cor(y,z,method="spearman")
cor(y,z,method="pearson")
library(VGAM)
?betabinom
?betabin
?betabinomial
?pbetabin
?pbetabinom
?betabinom
load(VGAM)
install.packages("VGAM")
load(VGAM)
library(VGAM)
?betabinom
?betabin
?betabinomial
x11()
x = c(9.375,18.75,37.5,75,150,300,600)
x1 = c(31.25,62.5,125,250,500,1000,2000)
y = c(0.022,0.039,0.079,0.148,0.287,0.4625,0.7515)
plot(x,y,col="black",pch=19,xlim=c(0,600),ylim=c(0,1))
par(new=T)
plot(x1,y,col="red",pch=19,xlim=c(0,600),ylim=c(0,1))
## fit1 linear ####
fit = lm(y~x)
summary(fit)
xx = seq(0,600,50)
par(new=T)
# plot(xx,predict(fit,data.frame(x=xx)), col="blue",type="b",lty=2,xlim=c(0,600),ylim=c(0,1))
yy = fit$coefficient[1] + fit$coefficient[2]*xx
plot(xx,yy,col="blue",type="b",lty=2,xlim=c(0,600),ylim=c(0,1))
## fit2 poly deg 2 ####
fit.poly = lm(y ~ poly(x, 2, raw=TRUE))
summary(fit.poly)
par(new=T)
# plot(xx,predict(fit.poly,data.frame(x=xx)), col="orange",type="b",lty=2,xlim=c(0,600),ylim=c(0,1))
yy.poly = fit.poly$coefficient[1] + fit.poly$coefficient[2]*xx + fit.poly$coefficient[3]*xx^2
plot(xx,yy.poly,col="orange", type="b",lty=2,xlim=c(0,600),ylim=c(0,1))
## fit3 poly deg 3 ####
fit.poly3 = lm(y ~ poly(x, 3, raw=TRUE))
summary(fit.poly3)
par(new=T)
# plot(xx,predict(fit.poly3,data.frame(x=xx)), col="orange",type="b",lty=2,xlim=c(0,600),ylim=c(0,1))
yy.poly3 = fit.poly3$coefficient[1] + fit.poly3$coefficient[2]*xx + fit.poly3$coefficient[3]*xx^2
plot(xx,yy.poly3,col="green", type="b",lty=2,xlim=c(0,600),ylim=c(0,1))
library(VGAM)
?betabinomial
library(VGAM)
?betabinomial
?pbinom
## parameters
maxN = 300
a = 0.5
#b = data$b
b = 0.046875
#p = data$p.choice.betabin ## for each dataset, an FDR of 5% (e.g) correspond to this p value
p = 0.004666015625
## for each b do a betabinomial distribution, for maxN
betabin <- function(x)
{
## 2 tail
j = dbetabinom(0,seq(0,maxN),0.5,x)*2
j[j>1] = 1
#   print (j) ##debug
return(j)
}
out.b = lapply(as.matrix(b),betabin)
findN <- function(x,y)
{
k = which.min(x[x>y])
return(k)
}
out.p = mapply(findN, out.b, p)
#data$minN = out.p
#write.table(data,file=paste(filename,".minN.new",sep=''), sep="\t",
#            row.names=FALSE,quote=FALSE)
library(VGAM)
## parameters
maxN = 300
a = 0.5
#b = data$b
b = 0.046875
#p = data$p.choice.betabin ## for each dataset, an FDR of 5% (e.g) correspond to this p value
p = 0.004666015625
## for each b do a betabinomial distribution, for maxN
betabin <- function(x)
{
## 2 tail
j = dbetabinom(0,seq(0,maxN),0.5,x)*2
j[j>1] = 1
#   print (j) ##debug
return(j)
}
out.b = lapply(as.matrix(b),betabin)
findN <- function(x,y)
{
k = which.min(x[x>y])
return(k)
}
out.p = mapply(findN, out.b, p)
#data$minN = out.p
#write.table(data,file=paste(filename,".minN.new",sep=''), sep="\t",
#            row.names=FALSE,quote=FALSE)
a=1
if(a<=3 & a>0)
P
if(a<=3 & a>0)
{ a=a+1 }
cat
x=a
x=3
x=3;
x=3,
x <- 3
x <- 3
p.betabin = apply(data.frame(2 * mapply(pbetabinom,lower,total,p,b)),1,function(x) min(x,1))
library(VGAM)
p.betabin = apply(data.frame(2 * mapply(pbetabinom,lower,total,p,b)),1,function(x) min(x,1))
lower=1;total=5;p=0.5;b=0
p.betabin = apply(data.frame(2 * mapply(pbetabinom,lower,total,p,b)),1,function(x) min(x,1))
lower=3;total=8;p=0.5;b=0
p.betabin = apply(data.frame(2 * mapply(pbetabinom,lower,total,p,b)),1,function(x) min(x,1))
lower=100;total=8;p=0.5;b=0
p.betabin = apply(data.frame(2 * mapply(pbetabinom,lower,total,p,b)),1,function(x) min(x,1))
lower=3;total=8;p=0.5;b=0.5
p.betabin = apply(data.frame(2 * mapply(pbetabinom,lower,total,p,b)),1,function(x) min(x,1))
lower=3;total=8;p=0.5;b=0.000001
p.betabin = apply(data.frame(2 * mapply(pbetabinom,lower,total,p,b)),1,function(x) min(x,1))
pbetabinom
?pbetabinom
p.bin = apply(data.frame(2 * mapply(pbinom,lower,total,p)),1,function(x) min(x,1))
p.bin
p.betabin = apply(data.frame(2 * mapply(pbetabinom,lower,total,p,b)),1,function(x) min(x,1))
p.betabin
lower=3;total=8;p=0.5;b=1e-10
p.bin = apply(data.frame(2 * mapply(pbinom,lower,total,p)),1,function(x) min(x,1));p.bin
p.betabin = apply(data.frame(2 * mapply(pbetabinom,lower,total,p,b)),1,function(x) min(x,1));p.betabin
if(b==0){  b=1e-10 }
b
b=0
b=8
if(b==0){  b=1e-10 }
b
b=0
if(b==0){  b=1e-10 }; b
p.thresh = data.frame( c(seq(0,0.01,by=0.001), seq(0.01,0.1,by=0.01), seq(0.1,1,by=0.1)) )
p.thresh = data.frame( c(seq(0,0.01,by=0.001), seq(0.01,0.1,by=0.01), seq(0.1,1,by=0.1)) ); p.thresh
p.thresh = unique( data.frame( c(seq(0,0.01,by=0.001), seq(0.01,0.1,by=0.01), seq(0.1,1,by=0.1)) )); p.thresh
p.thresh = c(seq(0,0.01,by=0.001), seq(0.01,0.1,by=0.01), seq(0.1,1,by=0.1)); p.thresh
p.thresh = duplicate(c(seq(0,0.01,by=0.001), seq(0.01,0.1,by=0.01), seq(0.1,1,by=0.1))); p.thresh
?duplicate
?duplicates
?dupl
?dup
?unique
p.thresh = unique( data.frame( c(seq(0,0.01,by=0.001), seq(0.01,0.1,by=0.01), seq(0.1,1,by=0.1)) )); p.thresh
p.thresh = data.frame( unique(c(seq(0,0.01,by=0.001), seq(0.01,0.1,by=0.01), seq(0.1,1,by=0.1)) )); p.thresh
c(seq(0,0.01,by=0.001), seq(0.01,0.1,by=0.01), seq(0.1,1,by=0.1))
unique( c(seq(0,0.01,by=0.001), seq(0.01,0.1,by=0.01), seq(0.1,1,by=0.1)) )
duplicated( c(seq(0,0.01,by=0.001), seq(0.01,0.1,by=0.01), seq(0.1,1,by=0.1)) )
a=c(seq(0,0.01,by=0.001), seq(0.01,0.1,by=0.01), seq(0.1,1,by=0.1))
a[,20] == a[,21]
a[20] == a[21]
a[20]
a[21]
a[22]
a[22] == a[21]
a[11]
a[12]
a[12] == a[11]
?seq
?seq
?sequence
a=c(seq(0,0.01,by=0.001), seq(0.01,0.1,by=0.01), seq(0.1,1,by=0.1)[-1])
a
data.frame( c(seq(0,0.01,by=0.001), seq(0.01,0.1,by=0.01), seq(0.1,1,by=0.1)[-1]) )
data.frame( c(seq(0,0.01,by=0.001), seq(0.01,0.1,by=0.01)[-1], seq(0.1,1,by=0.1)[-1]) )
x=2.4
nchar(strsplit(as.character(x), "\\.")[[1]][2])
x=2.5656475
nchar(strsplit(as.character(x), "\\.")[[1]][2])
?signif
x=c(4,5,6,7)
x
x=c(4,5,6,7)[-1]
x
x=c(4,5,6,7)[-1,]
x=c(4,5,6,7)[-2]
x
matrix(2,2)
a=matrix(2,2)
a[-1]
a
a=matrix(2,2)[-1]
a
a=matrix(2,2,2)[-1]
a
a=matrix(2,2,2)
a
a=matrix(2,2,2)[-1]
a=matrix(2,2,2)[-1,-1]
a
a=matrix(2,2,2)
a
a=matrix(2,2,2)[-2,]
a
a=matrix(c(1,2,3,4),2,2)[-2,]
a
a=matrix(c(1,2,3,4),2,2)
a
a=matrix(c(1,2,3,4),2,2)[,-2]
a
nrow(a)
a
a=matrix(c(1,2,3,4),2,2)
a
nrow(a)
a=matrix(c(1,2,3,4),2,2)[-nrow(a),]
a
?if
)
?if
else
?if-else
p.bin=0.55
dp.bin = nchar(strsplit(as.character(p.bin), "\\.")[[1]][2])
if(dp.bin==2)
{
step.bin = 0.01
} else if(dp.bin==3)
{
step.bin = 0.001
}
dp.bin = nchar(strsplit(as.character(p.bin), "\\.")[[1]][2])
if(dp.bin==2){ step.bin = 0.01
} else if(dp.bin==3){ step.bin = 0.001 }
step.bin=0
dp.bin = nchar(strsplit(as.character(p.bin), "\\.")[[1]][2])
if(dp.bin==2){ step.bin = 0.01
} else if(dp.bin==3){ step.bin = 0.001 }
max(1,2,6,0.4)
library(VGAM)
?betabinomial
# dbinom(5,5,0.5) *2
# dbinom(4,5,0.5) *2
# dbinom(3,5,0.5) *2
# dbinom(2,5,0.5) *2
# dbinom(1,5,0.5) *2
# dbinom(0,5,0.5) *2
########### betabinomial
library(VGAM)
## parameters
maxN = 479960
a = 0.5
b = 0.041796875 ## solo
p = 0.00166650390625 ## solo; for each dataset, an FDR of 5% (e.g) correspond to this p value
## for each b do a betabinomial distribution, for maxN
betabin <- function(x)
{
## 2 tail
j = dbetabinom(0,seq(0,maxN),0.5,x)*2
j[j>1] = 1
#   print (j) ##debug
return(j)
}
out.b = lapply(as.matrix(b),betabin)
findN <- function(x,y)
{
k = which.min(x[x>y])
return(k)
}
minN = mapply(findN, out.b, p)
# dbinom(5,5,0.5) *2
# dbinom(4,5,0.5) *2
# dbinom(3,5,0.5) *2
# dbinom(2,5,0.5) *2
# dbinom(1,5,0.5) *2
# dbinom(0,5,0.5) *2
########### betabinomial
library(VGAM)
## parameters
maxN = 1000
a = 0.5
b = 0.041796875 ## solo
p = 0.00166650390625 ## solo; for each dataset, an FDR of 5% (e.g) correspond to this p value
## for each b do a betabinomial distribution, for maxN
betabin <- function(x)
{
## 2 tail
j = dbetabinom(0,seq(0,maxN),0.5,x)*2
j[j>1] = 1
#   print (j) ##debug
return(j)
}
out.b = lapply(as.matrix(b),betabin)
findN <- function(x,y)
{
k = which.min(x[x>y])
return(k)
}
minN = mapply(findN, out.b, p)
# dbinom(5,5,0.5) *2
# dbinom(4,5,0.5) *2
# dbinom(3,5,0.5) *2
# dbinom(2,5,0.5) *2
# dbinom(1,5,0.5) *2
# dbinom(0,5,0.5) *2
########### betabinomial
library(VGAM)
## parameters
maxN = 1000
a = 0.5
b = 0.041796875 ## solo
p = 0.00166650390625 ## solo; for each dataset, an FDR of 5% (e.g) correspond to this p value
## for each b do a betabinomial distribution, for maxN
betabin <- function(x)
{
## 2 tail
j = dbetabinom(0,seq(0,maxN),0.5,x)*2
j[j>1] = 1
#   print (j) ##debug
return(j)
}
out.b = lapply(as.matrix(b),betabin)
findN <- function(x,y)
{
k = which.min(x[x>y])
return(k)
}
minN = mapply(findN, out.b, p)
# dbinom(5,5,0.5) *2
# dbinom(4,5,0.5) *2
# dbinom(3,5,0.5) *2
# dbinom(2,5,0.5) *2
# dbinom(1,5,0.5) *2
# dbinom(0,5,0.5) *2
########### betabinomial
library(VGAM)
## parameters
maxN = 1000
a = 0.5
b = 0.041796875 ## solo
p = 0.00366650390625 ## solo; for each dataset, an FDR of 5% (e.g) correspond to this p value
## for each b do a betabinomial distribution, for maxN
betabin <- function(x)
{
## 2 tail
j = dbetabinom(0,seq(0,maxN),0.5,x)*2
j[j>1] = 1
#   print (j) ##debug
return(j)
}
out.b = lapply(as.matrix(b),betabin)
findN <- function(x,y)
{
k = which.min(x[x>y])
return(k)
}
minN = mapply(findN, out.b, p)
# dbinom(5,5,0.5) *2
# dbinom(4,5,0.5) *2
# dbinom(3,5,0.5) *2
# dbinom(2,5,0.5) *2
# dbinom(1,5,0.5) *2
# dbinom(0,5,0.5) *2
########### betabinomial
library(VGAM)
## parameters
maxN = 479960
a = 0.5
b = 0.041796875 ## solo
p = 0.00366650390625 ## solo; for each dataset, an FDR of 5% (e.g) correspond to this p value
## for each b do a betabinomial distribution, for maxN
betabin <- function(x)
{
## 2 tail
j = dbetabinom(0,seq(0,maxN),0.5,x)*2
j[j>1] = 1
#   print (j) ##debug
return(j)
}
out.b = lapply(as.matrix(b),betabin)
findN <- function(x,y)
{
k = which.min(x[x>y])
return(k)
}
minN = mapply(findN, out.b, p)
# dbinom(5,5,0.5) *2
# dbinom(4,5,0.5) *2
# dbinom(3,5,0.5) *2
# dbinom(2,5,0.5) *2
# dbinom(1,5,0.5) *2
# dbinom(0,5,0.5) *2
########### betabinomial
library(VGAM)
## parameters
maxN = 479960
a = 0.5
b = 0.041796875 ## solo
p = 0.00366650390625 ## solo; for each dataset, an FDR of 5% (e.g) correspond to this p value
## for each b do a betabinomial distribution, for maxN
betabin <- function(x)
{
## 2 tail
j = dbetabinom(0,seq(0,maxN),0.5,x)*2
j[j>1] = 1
#   print (j) ##debug
return(j)
}
out.b = lapply(as.matrix(b),betabin)
findN <- function(x,y)
{
k = which.min(x[x>y])
return(k)
}
minN = mapply(findN, out.b, p)
# dbinom(5,5,0.5) *2
# dbinom(4,5,0.5) *2
# dbinom(3,5,0.5) *2
# dbinom(2,5,0.5) *2
# dbinom(1,5,0.5) *2
# dbinom(0,5,0.5) *2
########### betabinomial
library(VGAM)
## parameters
maxN = 226155
a = 0.5
b = 0.026953125 ## solo
p = 0.00166650390625 ## solo; for each dataset, an FDR of 5% (e.g) correspond to this p value
## for each b do a betabinomial distribution, for maxN
betabin <- function(x)
{
## 2 tail
j = dbetabinom(0,seq(0,maxN),0.5,x)*2
j[j>1] = 1
#   print (j) ##debug
return(j)
}
out.b = lapply(as.matrix(b),betabin)
findN <- function(x,y)
{
k = which.min(x[x>y])
return(k)
}
minN = mapply(findN, out.b, p)
# dbinom(5,5,0.5) *2
# dbinom(4,5,0.5) *2
# dbinom(3,5,0.5) *2
# dbinom(2,5,0.5) *2
# dbinom(1,5,0.5) *2
# dbinom(0,5,0.5) *2
########### betabinomial
library(VGAM)
## parameters
maxN = 479960
a = 0.5
b = 0.041796875 ## solo
p = 0.00366650390625 ## solo; for each dataset, an FDR of 5% (e.g) correspond to this p value
## for each b do a betabinomial distribution, for maxN
betabin <- function(x)
{
## 2 tail
j = dbetabinom(0,seq(0,maxN),0.5,x)*2
j[j>1] = 1
#   print (j) ##debug
return(j)
}
out.b = lapply(as.matrix(b),betabin)
findN <- function(x,y)
{
k = which.min(x[x>y])
return(k)
}
minN = mapply(findN, out.b, p)
